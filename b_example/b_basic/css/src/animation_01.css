 /* animation_01.css */

#wrap {width: 100rem; height: auto; min-height: 10rem; background-color: #dfdfdf;}
h1 {margin-bottom: 1rem; padding: 1rem; text-align: center; border-bottom: 1px solid #333;}

h2 {width: 100%; height: auto; padding: 1rem; box-sizing: border-box; background-color:  #59a;
color: #fff; text-indent: 2rem; margin-bottom: 0.5rem;}

.out_box {width: 100%; height: auto; background-color: #caa;}
.out_box>ul {width: 100%; height: auto;}
.out_box>ul:after {content: " "; display: block; width: 100%; height: 0; clear: both;}
.out_box li {float: left; margin: 1rem; width: 100px; height: 100px; border-radius: 50px; background-color: #0af; text-align: center; line-height: 100px; font-size: 1.5rem;
  color: #fff; font-weight: bold;}

.out_box li:nth-child(1):hover{background-color: #f06;} /* 단순하게 변화 */
.out_box li:nth-child(2):hover{background-color: #606; height: 200px; font-size: 3rem;
                               transition-property: height, background-color; /*all도 가능*/
                               transition-duration: 1000ms;}
.out_box li:nth-child(3):hover{height: 200px; transition-duration: 500ms;
  transition-property: height; transition-timing-function: cubic-bezier(.15,.92,.82,.03);}
.out_box li:nth-child(4):hover{font-size: 3rem; transition-property: font-size;
  transition-duration: 500ms; transition-delay: 200ms;}
.out_box li:nth-child(5):hover{height: 300px; background-color: #fa0;
  transform:translateY(3rem); transition: all 1000ms ease 200ms;}
.out_box li:nth-child(6){transition: all 800ms linear;}
.out_box li:nth-child(6):hover{background-color: #171717;
                               text-shadow: 0.5rem 0.5rem 0.5rem #fff;}
.out_box li:nth-child(6):active{box-shadow: 0.3rem 0.3rem 0.3rem #171717 inset;}
.out_box li:nth-child(7){transition: all 300ms ease;}
.out_box li:nth-child(7):hover{height: 300px; background-color: #f90;
                               transition-duration: 200ms;}
/*
    transition이란? css의 변화를 부드럽게 animation 기능으로 처리되는 형태를 만드는 것을 말한다.
    transition-duration :; -- 변화하는 시간, 기본은 초단위 1초(1s) | 1초(1000ms -자바)
    transition-property :; -- 어떠한 속성을 변화시킬것인가?
    transition-timing-function :; -- 변화의 흐름에 대한 속도를 어떻게 처리할것인가?
        -ease(빨라지다 느리게- 좀더 자연스럽게) | ease-in(점점 빠르게) | ease-out(점점 느리게) |
         ease-in-out(빨라지다 느리게) | linear(같은 속도로) | cubic-bezier () (사용자지정)
    transition-delay :; -- 지연시간 : 얼마의 시간뒤에 transition 기능을 수행할 것인가?

    transition:property  duration(수치)  timing-function  delay(수치); -- transition이 가지는 속성을 하나로 뭉쳐서 처리하는 기능 (수치는 앞에 있는 것은 진행시간, 뒤는 지연시간,
    가급적이면 순서를 지켜서 속성값을 작성해야한다.)

    transition 작성시 :hover | :active | :focus 등
    기존형태에서 변화의 시점을 던져주는 상황 (이벤트 발생시점)에 transition을 작성하면,
    원래대로 돌아갈 때에는 transition 기능이 적용되지 않는다.

*/


.h3 {margin: auto; padding: 2rem; box-sizing: border-box; width: 30rem; height: 15rem;
    background-color: #caa;}

.move_line {position: relative; margin: auto; padding: 2rem; box-sizing: border-box; width: 30rem;
            height: 15rem; background-color: #caa;}
p {width: 100%; height: 100%; background-color: rgba(255,255,0,0.3); text-align: center;
font-size: 2rem; line-height: 10rem; font-weight: bold;}

.move_line>div {position: absolute; /*transition: all 500ms ease;*/ background-color: #fa0;
                transition-property: all;
                transition-duration: 500ms;
                transition-timing-function: ease;
                transition-delay: 0ms;}

.line_01 {top: 0; left: 0; width: 0; height: 1rem; transition-delay: 2000ms;}
.line_02 {top: 0; right: 0; width: 1rem; height: 0; transition-delay: 1500ms;}
.line_03 {bottom: 0; right: 0; width: 0; height: 1rem; transition-delay: 1000ms;}
.line_04 {bottom: 0; left: 0; width: 1rem; height: 0; transition-delay: 500ms;}

.move_line:hover .line_01 {width: 100%; transition-delay: 500ms;}
.move_line:hover .line_02 {height: 100%; transition-delay: 1000ms;}
.move_line:hover .line_03 {width: 100%; transition-delay: 1500ms;}
.move_line:hover .line_04 {height: 100%; transition-delay: 2000ms;}

.move_line>p {background: url("../../img/animal.jpg") no-repeat 50% 50%;
               background-color: #caa; border: 10px solid #fff;}
p {background-position: 0 0;}

/* transition_test2 */
.multi_link {width: 100%; height: 20rem; background-color: #cac; 
      background-image: url("../../img/sea.jpg");
      background-repeat: no-repeat; background-position: 50% 50%;
      background-size: 130% auto;}
.multi_link>ul {width: 100%; height: 100%; background-color: rgba(70, 30, 0, 0.3);}

.multi_link>ul>li {float: left; width: 20%; height: 100%;
        border-right: 1px solid #fff;; box-sizing: border-box;}
.multi_link>ul>li:last-child {border-right: 0;}

.multi_link a {display: block; padding: 5rem 1rem; box-sizing: border-box;
               width: 100%; height: 100%; transition: all 500ms ease; color: #fff; font-size: 1.1rem;}

    .link_wrap {width: 100%; height: 100%; transition: all 500ms ease;}

    .link_wrap>i {position: relative; margin: auto; margin-bottom: 0.5rem; display: block;
                  width: 2rem; height: 2rem; text-align: center;
                  border-radius: 50%; border: 2.5px solid #fff; box-sizing: border-box;
                  line-height: calc(2rem - 4px); font-size: 1.5rem; font-weight: bold;}
    .link_wrap>i:after {content: "+"; display: block; position: absolute; border-radius: 50%;
    top: -2.5%; left: -2.5%; width: 105%; height: 105%; background-color: #fff; color: #171717;
    transform: scale(0); transition: all 200ms ease;}

    .link_wrap>h4 {width: 100%; height: auto; margin-bottom: 0.5rem; font-size: 1.2rem;
      font-weight: normal; font-size: 0.875rem;}
    .link_wrap>h5 {margin-bottom: 1.5rem; width: 100%; height: auto; font-size: 1.2rem;}
    .link_wrap>h5::first-letter {text-transform: uppercase;}
    .link_wrap>p {line-height: 110%; background-color: transparent;
                  font-size: 1rem; text-align: left; font-weight: normal; opacity: 0;
                  transition: all 500ms ease;}

.multi_link a:hover,            
.multi_link a:focus {background-color: rgba(0,0,0,0.7);}

/*.multi_link a:hover >.link_wrap,            
.multi_link a:focus >.link_wrap {transform: translateY(-2rem);}*/

.multi_link a:hover i,
.multi_link a:focus i {transform: translateY(-2rem);}
.multi_link a:hover i:after,            
.multi_link a:focus i:after {transform: scale(1);}

.multi_link a:hover h4,
.multi_link a:focus h4 {transform: translateY(-2rem);}

.multi_link a:hover h5,
.multi_link a:focus h5 {transform: translateY(-2rem);}

.multi_link a:hover p,       
.multi_link a:focus p {opacity: 1; transform: translateY(-2rem);}

/*======================================*/
.ani_narr {font-size: 1rem; line-height: 1.2; text-align: left;}
.ani_box {margin-bottom: 5rem; width: 100%; height: 1000px; background-color: #fac;}

.check {width: 30px; height: 30px; margin-left: -100px;}

.ani_box>ul {width: 100%; height: 100%; padding-top: 1rem;}
.ani_box li {margin: 1rem; width: 50px; height: 50px; border-radius: 25px; background-color: #069;
            text-align: center; line-height: 50px; color: #fff;}


.ani_box li:nth-child(1) {animation-name: oneFrame; animation-duration: 1000ms;
      animation-iteration-count: 2; animation-direction: alternate;}

.ani_box li:nth-child(2) {animation-name: oneFrame; animation-duration: 2000ms;
      animation-iteration-count: infinite; animation-direction: alternate-reverse;}

@keyframes oneFrame{
  0% {transform:translate(0); background-color: #0af;}
  50% {transform: translate(10rem, 3rem);}
  100% {transform:translate(30rem); background-color: #f07;}
}

.ani_box li:nth-child(3)
{animation-name:twoFrame;
 animation-duration: 3000ms;
 animation-iteration-count: 3;
 animation-timing-function: ease-in;
 /*animation-direction: alternate;*/
 animation-fill-mode: backwards;
}

@keyframes twoFrame {
 0% {transform: translate(0) rotate(0deg) scale(1);}
 100% {transform: translate(90rem) rotate(720deg) scale(2);}
}

.ani_box:hover li:nth-child(4) {animation-play-state: running;}

.ani_box:hover li:nth-child(5) {
 animation-name:threeFrame;
 animation-duration: 1000ms;
 animation-direction: alternate;
 animation-iteration-count: infinite;
 animation-fill-mode: forwards;
 animation-timing-function: ease;
}

@keyframes threeFrame {
  0% {background-color: #f06;}
  100% {background-color: #fa0; width: 500px; transform: rotate(360deg) scale(2);}
}

.ani_box:hover li:nth-child(6) {
/* animation: name(이름) duration(시간) count(반복) direction(뱡향); */
  animation: set 2000ms 5 alternate;
}

@keyframes set {
  0%{width: 100px; height: 100px; background-color: #f07;}
  50%{transform: translate(3rem) rotate(360deg);}
  100%{width: 500px; height: 300px; background-color: #fff;}

}


/*.check:checked + ul>li {transform: translate(10rem); transition: all 1000ms;}*/

/* animation
    *animation이란? transition과 달리 반복성을 가지거나, 단일성이 아닌, 여러복합성의 기능을 수행할 때

    animation-name :;  -- animation 기능을 수행할 함수(@keyframes)를 선택
    animation-duration :;  -- animation 진행할 시간
    animation-direction :;  -- animation이 종료 후에 진행할 방향을 설정
       - normal | reverse | alternate | alternate-reverse
      

    animation-fill-mode :;  -- animation 시작하기전/후 어떻게 적용할것인가
       - none | forward | backwrad | both
    animation-iteration-count :;  -- animation 반복여부, 무한반복( infinite )
    animation-timing-function :;  -- 속도조절
    animation-play-state :;  -- 멈춤, 재생설정
       - running | pause
    animation-delay :;  -- 지연시간

--------------------------------------------------------------------------------------------
    *@keyframes {}
     @keyframes란? animation에서 지정한 이름의 기능을 수행하기 위한 처리 내용, 일종의 함수
     @keyframes는 선택자 내부에 작성하는 것이 아니다.

*/

/*@media screen () {}
@charset " ";
@import url();
@keyframes {}

div{}

div Fbox = function(){};
Fboxx();

@keyframes aniName {}
div{animation-name:aniName;}*/